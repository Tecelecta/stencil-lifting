const EPS0 = 8.854187817e-12

// D:/Fortran/test/eupdate.f

func Real CURRTIME, Real DT8, Integer IBEGIN0, Integer IEND0, Integer IBEGIN1, Integer IEND1, Integer IBEGIN2, Integer IEND2, Integer IFIRST0, Integer ILAST0, Integer IFIRST1, Integer ILAST1, Integer IFIRST2, Integer ILAST2, Integer GCW_X, Integer GCW_Y, Integer GCW_Z, Integer[0 : 5] PML_LAYER, Real[? : ?, ? : ?, ? : ?] EX, Real[? : ?, ? : ?, ? : ?] EY, Real[? : ?, ? : ?, ? : ?] EZ, Real[? : ?, ? : ?, ? : ?] HX, Real[? : ?, ? : ?, ? : ?] HY, Real[? : ?, ? : ?, ? : ?] HZ, Real[? : ?, ? : ?, ? : ?] PSI_EXY, Real[? : ?, ? : ?, ? : ?] PSI_EXZ, Real[? : ?, ? : ?, ? : ?] PSI_EYX, Real[? : ?, ? : ?, ? : ?] PSI_EYZ, Real[? : ?, ? : ?, ? : ?] PSI_EZX, Real[? : ?, ? : ?, ? : ?] PSI_EZY, Real[? : ?, ? : ?, ? : ?] EPSR, Real[? : ?, ? : ?, ? : ?] SIGMA, Real[? : ?] PMLSIGMA_X, Real[? : ?] PMLSIGMA_Y, Real[? : ?] PMLSIGMA_Z, Real[? : ?] KAPPA_X, Real[? : ?] KAPPA_Y, Real[? : ?] KAPPA_Z, Real[? : ?] ALPHA_X, Real[? : ?] ALPHA_Y, Real[? : ?] ALPHA_Z, Integer DX_NUM, Integer DY_NUM, Integer DZ_NUM, Real[0 : ?] D_DX, Real[0 : ?] D_DY, Real[0 : ?] D_DZ = EUPDATE(Real CURRTIME, Real DT8, Integer IBEGIN0, Integer IEND0, Integer IBEGIN1, Integer IEND1, Integer IBEGIN2, Integer IEND2, Integer IFIRST0, Integer ILAST0, Integer IFIRST1, Integer ILAST1, Integer IFIRST2, Integer ILAST2, Integer GCW_X, Integer GCW_Y, Integer GCW_Z, Integer[0 : 5] PML_LAYER, Real[? : ?, ? : ?, ? : ?] EX, Real[? : ?, ? : ?, ? : ?] EY, Real[? : ?, ? : ?, ? : ?] EZ, Real[? : ?, ? : ?, ? : ?] HX, Real[? : ?, ? : ?, ? : ?] HY, Real[? : ?, ? : ?, ? : ?] HZ, Real[? : ?, ? : ?, ? : ?] PSI_EXY, Real[? : ?, ? : ?, ? : ?] PSI_EXZ, Real[? : ?, ? : ?, ? : ?] PSI_EYX, Real[? : ?, ? : ?, ? : ?] PSI_EYZ, Real[? : ?, ? : ?, ? : ?] PSI_EZX, Real[? : ?, ? : ?, ? : ?] PSI_EZY, Real[? : ?, ? : ?, ? : ?] EPSR, Real[? : ?, ? : ?, ? : ?] SIGMA, Real[? : ?] PMLSIGMA_X, Real[? : ?] PMLSIGMA_Y, Real[? : ?] PMLSIGMA_Z, Real[? : ?] KAPPA_X, Real[? : ?] KAPPA_Y, Real[? : ?] KAPPA_Z, Real[? : ?] ALPHA_X, Real[? : ?] ALPHA_Y, Real[? : ?] ALPHA_Z, Integer DX_NUM, Integer DY_NUM, Integer DZ_NUM, Real[0 : ?] D_DX, Real[0 : ?] D_DY, Real[0 : ?] D_DZ)
	/*
	var DX = Real()
	var DY = Real()
	var DZ = Real()
	var EPS8 = Real()
	var SIGMA8 = Real()
	var PMLSIGMA_X8 = Real()
	var PMLSIGMA_Y8 = Real()
	var PMLSIGMA_Z8 = Real()
	var ALPHA_X8 = Real()
	var ALPHA_Y8 = Real()
	var ALPHA_Z8 = Real()
	var KAPPA_X8 = Real()
	var KAPPA_Y8 = Real()
	var KAPPA_Z8 = Real()
	var CA = Real()
	var CB = Real()
	var A_X = Real()
	var A_Y = Real()
	var A_Z = Real()
	var B_X = Real()
	var B_Y = Real()
	var B_Z = Real()
	*/
	var IX = Integer()
	var IY = Integer()
	var IZ = Integer()
	var N_PML_XLO = Integer()
	var N_PML_XHI = Integer()
	var N_PML_YLO = Integer()
	var N_PML_YHI = Integer()
	var N_PML_ZLO = Integer()
	var N_PML_ZHI = Integer()
	N_PML_XLO = PML_LAYER[0]
	N_PML_YLO = PML_LAYER[1]
	N_PML_ZLO = PML_LAYER[2]
	N_PML_XHI = PML_LAYER[3]
	N_PML_YHI = PML_LAYER[4]
	N_PML_ZHI = PML_LAYER[5]
	do IZ = IFIRST2, ILAST2
		do IY = IFIRST1, ILAST1
			do IX = IFIRST0, ILAST0
				var DX = Real()
				var DY = Real()
				var DZ = Real()
				var EPS8 = Real()
				var SIGMA8 = Real()
				var PMLSIGMA_X8 = Real()
				var PMLSIGMA_Y8 = Real()
				var PMLSIGMA_Z8 = Real()
				var ALPHA_X8 = Real()
				var ALPHA_Y8 = Real()
				var ALPHA_Z8 = Real()
				var KAPPA_X8 = Real()
				var KAPPA_Y8 = Real()
				var KAPPA_Z8 = Real()
				var CA = Real()
				var CB = Real()
				var A_X = Real()
				var A_Y = Real()
				var A_Z = Real()
				var B_X = Real()
				var B_Y = Real()
				var B_Z = Real()
				if (IX >= IBEGIN0 + N_PML_XLO) && (IX <= IEND0 - N_PML_XHI) && (IY >= IBEGIN1 + N_PML_YLO) && (IY <= IEND1 - N_PML_YHI) && (IZ >= IBEGIN2 + N_PML_ZLO) && (IZ <= IEND2 - N_PML_ZHI)
					DX = (D_DX[IX] + D_DX[IX - 1]) * 0.5
					DY = (D_DY[IY] + D_DY[IY - 1]) * 0.5
					DZ = (D_DZ[IZ] + D_DZ[IZ - 1]) * 0.5
					EPS8 = 0.25 * EPS0 * (EPSR[IX, IY - 1, IZ - 1] + EPSR[IX, IY - 1, IZ] + EPSR[IX, IY, IZ - 1] + EPSR[IX, IY, IZ])
					SIGMA8 = 0.25 * (SIGMA[IX, IY - 1, IZ - 1] + SIGMA[IX, IY - 1, IZ] + SIGMA[IX, IY, IZ - 1] + SIGMA[IX, IY, IZ])
					CA = (2 * EPS8 - DT8 * SIGMA8) / (2 * EPS8 + DT8 * SIGMA8)
					CB = 2 * DT8 / (2 * EPS8 + DT8 * SIGMA8)
					EX[IX, IY, IZ] = CA * EX[IX, IY, IZ] + CB * ((HZ[IX, IY, IZ] - HZ[IX, IY - 1, IZ]) / DY - (HY[IX, IY, IZ] - HY[IX, IY, IZ - 1]) / DZ)
					EPS8 = 0.25 * EPS0 * (EPSR[IX - 1, IY, IZ - 1] + EPSR[IX - 1, IY, IZ] + EPSR[IX, IY, IZ - 1] + EPSR[IX, IY, IZ])
					SIGMA8 = 0.25 * (SIGMA[IX - 1, IY, IZ - 1] + SIGMA[IX - 1, IY, IZ] + SIGMA[IX, IY, IZ - 1] + SIGMA[IX, IY, IZ])
					CA = (2 * EPS8 - DT8 * SIGMA8) / (2 * EPS8 + DT8 * SIGMA8)
					CB = 2 * DT8 / (2 * EPS8 + DT8 * SIGMA8)
					EY[IX, IY, IZ] = CA * EY[IX, IY, IZ] + CB * ((HX[IX, IY, IZ] - HX[IX, IY, IZ - 1]) / DZ - (HZ[IX, IY, IZ] - HZ[IX - 1, IY, IZ]) / DX)
					EPS8 = 0.25 * EPS0 * (EPSR[IX - 1, IY - 1, IZ] + EPSR[IX - 1, IY, IZ] + EPSR[IX, IY - 1, IZ] + EPSR[IX, IY, IZ])
					SIGMA8 = 0.25 * (SIGMA[IX - 1, IY - 1, IZ] + SIGMA[IX - 1, IY, IZ] + SIGMA[IX, IY - 1, IZ] + SIGMA[IX, IY, IZ])
					CA = (2 * EPS8 - DT8 * SIGMA8) / (2 * EPS8 + DT8 * SIGMA8)
					CB = 2 * DT8 / (2 * EPS8 + DT8 * SIGMA8)
					EZ[IX, IY, IZ] = CA * EZ[IX, IY, IZ] + CB * ((HY[IX, IY, IZ] - HY[IX - 1, IY, IZ]) / DX - (HX[IX, IY, IZ] - HX[IX, IY - 1, IZ]) / DY)
				else
					DX = D_DX[IX]
					DY = D_DY[IY]
					DZ = D_DZ[IZ]
					EPS8 = 0.25 * EPS0 * (EPSR[IX, IY - 1, IZ - 1] + EPSR[IX, IY - 1, IZ] + EPSR[IX, IY, IZ - 1] + EPSR[IX, IY, IZ])
					SIGMA8 = 0.25 * (SIGMA[IX, IY - 1, IZ - 1] + SIGMA[IX, IY - 1, IZ] + SIGMA[IX, IY, IZ - 1] + SIGMA[IX, IY, IZ])
					CA = (2 * EPS8 - DT8 * SIGMA8) / (2 * EPS8 + DT8 * SIGMA8)
					CB = 2 * DT8 / (2 * EPS8 + DT8 * SIGMA8)
					PMLSIGMA_Y8 = 0.5 * (PMLSIGMA_Y[IY - 1] + PMLSIGMA_Y[IY])
					PMLSIGMA_Z8 = 0.5 * (PMLSIGMA_Z[IZ - 1] + PMLSIGMA_Z[IZ])
					KAPPA_Y8 = 0.5 * (KAPPA_Y[IY - 1] + KAPPA_Y[IY])
					KAPPA_Z8 = 0.5 * (KAPPA_Z[IZ - 1] + KAPPA_Z[IZ])
					ALPHA_Y8 = 0.5 * (ALPHA_Y[IY - 1] + ALPHA_Y[IY])
					ALPHA_Z8 = 0.5 * (ALPHA_Z[IZ - 1] + ALPHA_Z[IZ])
					B_Y = exp(- (PMLSIGMA_Y8 / KAPPA_Y8 + ALPHA_Y8) * (DT8 / EPS0))
					B_Z = exp(- (PMLSIGMA_Z8 / KAPPA_Z8 + ALPHA_Z8) * (DT8 / EPS0))
					if PMLSIGMA_Y8 > 1.0
						A_Y = PMLSIGMA_Y8 / (PMLSIGMA_Y8 * KAPPA_Y8 + KAPPA_Y8 ** 2 * ALPHA_Y8) * (B_Y - 1.0)
					else
						A_Y = 0.0
					end if
					if PMLSIGMA_Z8 > 1.0
						A_Z = PMLSIGMA_Z8 / (PMLSIGMA_Z8 * KAPPA_Z8 + KAPPA_Z8 ** 2 * ALPHA_Z8) * (B_Z - 1.0)
					else
						A_Z = 0.0
					end if
					PSI_EXY[IX, IY, IZ] = B_Y * PSI_EXY[IX, IY, IZ] + A_Y * (HZ[IX, IY, IZ] - HZ[IX, IY - 1, IZ]) / DY
					PSI_EXZ[IX, IY, IZ] = B_Z * PSI_EXZ[IX, IY, IZ] + A_Z * (HY[IX, IY, IZ] - HY[IX, IY, IZ - 1]) / DZ
					EX[IX, IY, IZ] = CA * EX[IX, IY, IZ] + CB * ((HZ[IX, IY, IZ] - HZ[IX, IY - 1, IZ]) / (KAPPA_Y8 * DY) - (HY[IX, IY, IZ] - HY[IX, IY, IZ - 1]) / (KAPPA_Z8 * DZ)) + CB * (PSI_EXY[IX, IY, IZ] - PSI_EXZ[IX, IY, IZ])
					EPS8 = 0.25 * EPS0 * (EPSR[IX - 1, IY, IZ - 1] + EPSR[IX - 1, IY, IZ] + EPSR[IX, IY, IZ - 1] + EPSR[IX, IY, IZ])
					SIGMA8 = 0.25 * (SIGMA[IX - 1, IY, IZ - 1] + SIGMA[IX - 1, IY, IZ] + SIGMA[IX, IY, IZ - 1] + SIGMA[IX, IY, IZ])
					CA = (2 * EPS8 - DT8 * SIGMA8) / (2 * EPS8 + DT8 * SIGMA8)
					CB = 2 * DT8 / (2 * EPS8 + DT8 * SIGMA8)
					PMLSIGMA_X8 = 0.5 * (PMLSIGMA_X[IX - 1] + PMLSIGMA_X[IX])
					PMLSIGMA_Z8 = 0.5 * (PMLSIGMA_Z[IZ - 1] + PMLSIGMA_Z[IZ])
					KAPPA_X8 = 0.5 * (KAPPA_X[IX - 1] + KAPPA_X[IX])
					KAPPA_Z8 = 0.5 * (KAPPA_Z[IZ - 1] + KAPPA_Z[IZ])
					ALPHA_X8 = 0.5 * (ALPHA_X[IX - 1] + ALPHA_X[IX])
					ALPHA_Z8 = 0.5 * (ALPHA_Z[IZ - 1] + ALPHA_Z[IZ])
					B_X = exp(- (PMLSIGMA_X8 / KAPPA_X8 + ALPHA_X8) * (DT8 / EPS0))
					B_Z = exp(- (PMLSIGMA_Z8 / KAPPA_Z8 + ALPHA_Z8) * (DT8 / EPS0))
					if PMLSIGMA_X8 > 1.0
						A_X = PMLSIGMA_X8 / (PMLSIGMA_X8 * KAPPA_X8 + KAPPA_X8 ** 2 * ALPHA_X8) * (B_X - 1.0)
					else
						A_X = 0.0
					end if
					if PMLSIGMA_Z8 > 1.0
						A_Z = PMLSIGMA_Z8 / (PMLSIGMA_Z8 * KAPPA_Z8 + KAPPA_Z8 ** 2 * ALPHA_Z8) * (B_Z - 1.0)
					else
						A_Z = 0.0
					end if
					PSI_EYX[IX, IY, IZ] = B_X * PSI_EYX[IX, IY, IZ] + A_X * (HZ[IX, IY, IZ] - HZ[IX - 1, IY, IZ]) / DX
					PSI_EYZ[IX, IY, IZ] = B_Z * PSI_EYZ[IX, IY, IZ] + A_Z * (HX[IX, IY, IZ] - HX[IX, IY, IZ - 1]) / DZ
					EY[IX, IY, IZ] = CA * EY[IX, IY, IZ] + CB * ((HX[IX, IY, IZ] - HX[IX, IY, IZ - 1]) / (KAPPA_Z8 * DZ) - (HZ[IX, IY, IZ] - HZ[IX - 1, IY, IZ]) / (KAPPA_X8 * DX)) + CB * (PSI_EYZ[IX, IY, IZ] - PSI_EYX[IX, IY, IZ])
					EPS8 = 0.25 * EPS0 * (EPSR[IX - 1, IY - 1, IZ] + EPSR[IX - 1, IY, IZ] + EPSR[IX, IY - 1, IZ] + EPSR[IX, IY, IZ])
					SIGMA8 = 0.25 * (SIGMA[IX - 1, IY - 1, IZ] + SIGMA[IX - 1, IY, IZ] + SIGMA[IX, IY - 1, IZ] + SIGMA[IX, IY, IZ])
					CA = (2 * EPS8 - DT8 * SIGMA8) / (2 * EPS8 + DT8 * SIGMA8)
					CB = 2 * DT8 / (2 * EPS8 + DT8 * SIGMA8)
					PMLSIGMA_X8 = 0.5 * (PMLSIGMA_X[IX - 1] + PMLSIGMA_X[IX])
					PMLSIGMA_Y8 = 0.5 * (PMLSIGMA_Y[IY - 1] + PMLSIGMA_Y[IY])
					KAPPA_X8 = 0.5 * (KAPPA_X[IX - 1] + KAPPA_X[IX])
					KAPPA_Y8 = 0.5 * (KAPPA_Y[IY - 1] + KAPPA_Y[IY])
					ALPHA_X8 = 0.5 * (ALPHA_X[IX - 1] + ALPHA_X[IX])
					ALPHA_Y8 = 0.5 * (ALPHA_Y[IY - 1] + ALPHA_Y[IY])
					B_X = exp(- (PMLSIGMA_X8 / KAPPA_X8 + ALPHA_X8) * (DT8 / EPS0))
					B_Y = exp(- (PMLSIGMA_Y8 / KAPPA_Y8 + ALPHA_Y8) * (DT8 / EPS0))
					if PMLSIGMA_X8 > 1.0
						A_X = PMLSIGMA_X8 / (PMLSIGMA_X8 * KAPPA_X8 + KAPPA_X8 ** 2 * ALPHA_X8) * (B_X - 1.0)
					else
						A_X = 0.0
					end if
					if PMLSIGMA_Y8 > 1.0
						A_Y = PMLSIGMA_Y8 / (PMLSIGMA_Y8 * KAPPA_Y8 + KAPPA_Y8 ** 2 * ALPHA_Y8) * (B_Y - 1.0)
					else
						A_Y = 0.0
					end if
					PSI_EZX[IX, IY, IZ] = B_X * PSI_EZX[IX, IY, IZ] + A_X * (HY[IX, IY, IZ] - HY[IX - 1, IY, IZ]) / DX
					PSI_EZY[IX, IY, IZ] = B_Y * PSI_EZY[IX, IY, IZ] + A_Y * (HX[IX, IY, IZ] - HX[IX, IY - 1, IZ]) / DY
					EZ[IX, IY, IZ] = CA * EZ[IX, IY, IZ] + CB * ((HY[IX, IY, IZ] - HY[IX - 1, IY, IZ]) / (KAPPA_X8 * DX) - (HX[IX, IY, IZ] - HX[IX, IY - 1, IZ]) / (KAPPA_Y8 * DY)) + CB * (PSI_EZX[IX, IY, IZ] - PSI_EZY[IX, IY, IZ])
				end if
			end do
		end do
	end do
end func

